%This paper assess the cost of technical debt and interest for common sub-items that allow source code to decay over time. They estimate the time taken and consequently the cost of reducing the debt within acceptable levels. These level depend on the interest related with any of these items. However, the interest ratios are arbitrary.
@article{threshold_approach_to_td,
  title={A threshold based approach to technical debt},
  author={Eisenberg, Robert J},
  journal={ACM SIGSOFT Software Engineering Notes},
  volume={37},
  number={2},
  pages={1--6},
  year={2012},
  publisher={ACM}
}

%This study indicates that the validity of the deinition of code smells is applicable to domain-specific systems. It however requires some tailoring to be perfectly functional.
@inproceedings{domain_specific_code_smells,
  title={Domain-specific tailoring of code smells: an empirical study},
  author={Guo, Yuepu and Seaman, Carolyn and Zazworka, Nico and Shull, Forrest},
  booktitle={Proceedings of the 32nd ACM/IEEE International Conference on Software Engineering-Volume 2},
  pages={167--170},
  year={2010},
  organization={ACM}
}

%Code smell definition
@book{code_smell_definition,
  title={Refactoring: improving the design of existing code},
  author={Fowler, Martin},
  year={2002},
  publisher={Pearson Education India}
}

%SONAR framework for evaluating technical debbt
@article{sonar_evaluate_td,
  title={Evaluate your technical debt with Sonar},
  author={Gaudin, O},
  journal={Sonar, Jun},
  year={2009}
}

%How large is my technical debt?
%How much interest am I paying on the debt?
%Is the debt growing, and how fast? What is the consequence of holding onto a debt for future maintenance?
@inproceedings{technicalDebtInterest,
	author = {Nugroho, Ariadi and Visser, Joost and Kuipers, Tobias},
	title = {An Empirical Model of Technical Debt and Interest},
	booktitle = {Proceedings of the 2Nd Workshop on Managing Technical Debt},
	series = {MTD '11},
	year = {2011},
	isbn = {978-1-4503-0586-0},
	location = {Waikiki, Honolulu, HI, USA},
	pages = {1--8},
	numpages = {8},
	url = {http://doi.acm.org/10.1145/1985362.1985364},
	doi = {10.1145/1985362.1985364},
	acmid = {1985364},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {cost, effort, estimation, maintenance, measurement, software economics},
} 

%Mc Cabe Cyclomatic complexity
@article{cyclomatic_complexity,
  title={A complexity measure},
  author={McCabe, Thomas J},
  journal={Software Engineering, IEEE Transactions on},
  number={4},
  pages={308--320},
  year={1976},
  publisher={IEEE}
}

%Longitudinal study on two eclipse java projects.
@article{assessing_technical_debt_eclipse,
  title={Assessing technical debt by identifying design flaws in software systems},
  author={Marinescu, Radu},
  journal={IBM Journal of Research and Development},
  volume={56},
  number={5},
  pages={9--1},
  year={2012},
  publisher={IBM}
}


@INPROCEEDINGS{code_td_comprehension_activities, 
	author={Singh, Vallary and Snipes, Will and Kraft, Nicholas A.}, 
	booktitle={Managing Technical Debt (MTD), 2014 Sixth International Workshop on}, 
	title={A Framework for Estimating Interest on Technical Debt by Monitoring Developer Activity Related to Code Comprehension}, 
	year={2014}, 
	month={Sept}, 
	pages={27-30}, 
	keywords={Conferences;Technical Debt;code metrics;code smells;program comprehension;software maintenance;static analysis}, 
	doi={10.1109/MTD.2014.16},}
	
	
%metrics for source code
@article{metrics_source_code,
  title={Code quality analysis in open source software development},
  author={Stamelos, Ioannis and Angelis, Lefteris and Oikonomou, Apostolos and Bleris, Georgios L},
  journal={Information Systems Journal},
  volume={12},
  number={1},
  pages={43--60},
  year={2002},
  publisher={Wiley Online Library}
}